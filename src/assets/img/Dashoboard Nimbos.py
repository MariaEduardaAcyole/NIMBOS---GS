# mayke costa santos RM: 562680
# Matheus Goes RM: 566407
# Maria eduarda Sousa Acyole de Oliveira RM: 566337

import random  # Importa o m√≥dulo 'random' para gerar n√∫meros aleat√≥rios.
from time import sleep  # Importa a fun√ß√£o 'sleep' do m√≥dulo 'time' para pausar a execu√ß√£o do programa.
from colorama import Fore, Style, \
init  # Importa classes e fun√ß√µes do m√≥dulo 'colorama' para adicionar cores ao texto no console.

init(autoreset=True)  # Inicializa o colorama e configura para que as cores sejam redefinidas automaticamente ap√≥s cada 'print'.
print('=' * 70)
print(f"{Fore.BLUE}             Bem vindo ao Sistema de Monitoriamento NIMBOS")
print('=' * 70)

'''nome do usuario'''


def nomeUsuario(nome):
    return nome  # Retorna o nome do usu√°rio fornecido.


'''validar o email do usuario'''


def validarEmail(email):
    # Verifica se o caractere '@' e '.' est√£o presentes no email para uma valida√ß√£o b√°sica de formato.
    return "@" in email and "." in email


# A fun√ß√£o 'validarSenha' foi removida, pois a op√ß√£o de senha n√£o √© mais necess√°ria, conforme solicita√ß√£o anterior.

'''Sistema de busca por Cep'''


def buscaPorCep(cep):
    bueiros = []  # Inicializa uma lista vazia para armazenar os dicion√°rios de bueiros encontrados.
    # Loop que itera um n√∫mero aleat√≥rio de vezes (entre 3 e 6) para simular a quantidade de bueiros na regi√£o.
    for i in range(random.randint(3, 6)):
        bueiro = {  # Cria um dicion√°rio para representar um bueiro com suas propriedades.
            "id": f"B{i + 1}",  # Define um ID √∫nico para o bueiro (ex: B1, B2, etc.).
            "quantidade_lixo": random.randint(0, 100),
            # Gera uma quantidade de lixo aleat√≥ria para o bueiro (de 0 a 100%).
            "vazao_agua": random.randint(0, 100)  # Adiciona a vaz√£o de √°gua aleat√≥ria para o bueiro (de 0 a 100%).
        }
        bueiros.append(bueiro)  # Adiciona o bueiro gerado √† lista de bueiros.
    return bueiros  # Retorna a lista de bueiros encontrados na simula√ß√£o.


'''retorno para usuario da situa√ß√µes do bueiros'''


def situacaoBueiros(qtda):
    if qtda < 30:  # Se a quantidade de lixo for menor que 30%.
        return f"{Fore.GREEN}Verde (Situa√ß√£o tranquila)"  # Retorna a situa√ß√£o "Verde" em texto verde.
    elif qtda < 70:  # Se a quantidade de lixo for menor que 70% (e maior ou igual a 30%).
        return f"{Fore.YELLOW}Amarelho (Necessita de Limpeza)"  # Retorna a situa√ß√£o "Amarelo" em texto amarelo.
    else:  # Se a quantidade de lixo for 70% ou mais.
        return f"{Fore.RED}Vermelho (Risco de Alagamentos)"  # Retorna a situa√ß√£o "Vermelho" em texto vermelho.


'''Iniciativa NIMBOS'''


def sistemaNimbos():
    print("\n‚úÖ Monitoramento conclu√≠do com sucesso.")  # Imprime uma mensagem de conclus√£o do monitoramento.


'''Contato e pedido de Autoridades para limpeza'''


def informarAutoridade():
    print("\n" + '=' * 45)
    print(f"{Fore.CYAN}    DESEJA INFORMAR A Prefeitura ?")
    print('=' * 45)

    while True:  # Inicia um loop para garantir uma resposta v√°lida do usu√°rio.
        resposta = input(
            f"{Fore.CYAN}Digite 'sim' para informar ou 'n√£o' para sair: ").lower().strip()  # Solicita a resposta do usu√°rio, convertendo para min√∫sculas e removendo espa√ßos.
        if resposta == 'sim':  # Se a resposta for 'sim'.
            print(f"\n{Fore.GREEN}‚úÖ Encaminhando informa√ß√µes √†s autoridades...")  # Mensagem de encaminhamento em verde.
            # Informa n√∫meros de contato para a Defesa Civil e Prefeitura.
            print(
                f"{Fore.YELLOW}Para contato direto, ligue para: {Style.BRIGHT}199 (Defesa Civil) ou 156 (Prefeitura).")
            print(f"{Fore.GREEN}Agradecemos seu apoio no monitoramento de bueiros!")  # Mensagem de agradecimento.
            break  # Sai do loop.
        elif resposta == 'n√£o':  # Se a resposta for 'n√£o'.
            print(
                f"{Fore.MAGENTA}Opera√ß√£o cancelada. Obrigado por usar o Sistema NIMBOS!")  # Mensagem de cancelamento em magenta.
            break  # Sai do loop.
        else:  # Se a resposta n√£o for 'sim' nem 'n√£o'.
            print(f"{Fore.RED}Op√ß√£o inv√°lida. Por favor, digite 'sim' ou 'n√£o'.")  # Mensagem de erro em vermelho.


'''Valida√ß√£o de login do usuario'''
while True:  # Inicia um loop infinito para a valida√ß√£o de nome e email do usu√°rio.
    nome = input("Qual e o seu nome: ")  # Solicita o nome do usu√°rio.
    if nomeUsuario(
            nome):  # Chama a fun√ß√£o nomeUsuario (que sempre retorna o nome, ent√£o esta condi√ß√£o √© sempre True para um nome n√£o vazio).
        print(
            f'Bem vindo {nome} ao Sistema monitoriamento NIMBOS')  # Imprime uma mensagem de boas-vindas personalizada.

    email = input("Digite Seu Email: ")  # Solicita o email do usu√°rio.
    if not validarEmail(email):  # Verifica se o email √© inv√°lido usando a fun√ß√£o validarEmail.
        print("email invalido. Tente Novamente")  # Informa que o email √© inv√°lido.
        continue  # Continua para a pr√≥xima itera√ß√£o do loop (solicita novamente nome e email).

    # A solicita√ß√£o e valida√ß√£o de senha foram removidas daqui, conforme a atualiza√ß√£o do c√≥digo.
    break  # Se o nome e o email forem v√°lidos, sai do loop de valida√ß√£o.

print('=' * 45)
print(f"{Fore.BLUE}        AREA DE CONSULTA DE BUEIROS")
print('=' * 45)

'''Valida√ß√£o de cep'''
while True:  # Inicia um loop infinito para a valida√ß√£o do CEP.
    cep = input("Digite o CEP da regi√£o (somente n√∫meros): ")  # Solicita o CEP ao usu√°rio.
    # Verifica se o CEP cont√©m apenas d√≠gitos e tem exatamente 8 caracteres.
    if cep.isdigit() and len(cep) == 8:
        break  # Se o CEP for v√°lido, sai do loop.
    else:
        print("CEP inv√°lido. Deve conter 8 n√∫meros.")  # Informa que o CEP √© inv√°lido.

print("\nüîé Buscando bueiros com produto Nimbos na regi√£o...\n")  # Imprime uma mensagem indicando a busca por bueiros.

bueiros = buscaPorCep(cep)  # Chama a fun√ß√£o buscaPorCep para simular a busca e obter a lista de bueiros.

print('=' * 45)
print(f"{Fore.BLUE}     AGUARDE PROCURANDO NIMBOS NA REGI√ÉO...")
print('=' * 45)
sleep(2)  # Pausa a execu√ß√£o por 2 segundos para simular um tempo de carregamento.

'''Apresenta√ß√£o dos bueiros'''
print(
    f"Regi√£o CEP: {cep} ‚Äî {len(bueiros)} bueiros encontrados:\n")  # Imprime o CEP da regi√£o e o n√∫mero de bueiros encontrados.

for b in bueiros:  # Itera sobre cada bueiro na lista de bueiros.
    cor = situacaoBueiros(b["quantidade_lixo"])  # Obt√©m a situa√ß√£o do bueiro (cor) com base na quantidade de lixo.
    # Imprime os detalhes de cada bueiro: ID, quantidade de lixo, vaz√£o de √°gua e n√≠vel de situa√ß√£o.
    print(f"Bueiro {b['id']} ‚Äî Lixo: {b['quantidade_lixo']}% ‚Äî Vaz√£o de √Ågua: {b['vazao_agua']}% ‚Äî N√≠vel: {cor}")

'''Execu√ß√£o do programa'''
if __name__ == "__main__":  # Verifica se o script est√° sendo executado diretamente (n√£o importado como m√≥dulo).
    sistemaNimbos()  # Chama a fun√ß√£o que indica a conclus√£o do monitoramento.
    informarAutoridade()  # Chama a fun√ß√£o para perguntar ao usu√°rio se deseja informar a autoridade do governo.
